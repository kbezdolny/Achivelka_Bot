from telebot import TeleBot, types
from telebot import logger as tbLogger
from typing import Final

import logging
import os
import additions
import app_logger
import database as db
import re
from exceptions.AchievementAlreadyExists import AchievementAlreadyExists


ALLOWED_GROUP_ID: Final[int] = int(os.getenv("allowed_group_id"))
TOKEN: Final[str] = os.getenv("bot_token")

bot = TeleBot(TOKEN)
tbLogger.setLevel(logging.INFO)
app_logger.createFileHandler()
additions.createRanks()


@bot.message_handler(content_types=['new_chat_members'])
def handle_new_member(message):
    if message.chat.type not in ['group', 'supergroup']:
        bot.leave_chat(message.chat.id)
        return

    if message.chat.id != ALLOWED_GROUP_ID:
        print(f"Failed to connect to a new group with ID: {message.chat.id}")
        bot.leave_chat(message.chat.id)
        return

    print(f"Success connected to a new group with ID: {message.chat.id}")


@bot.message_handler(commands=['start', 'lobby'])
def handle_menu(message):
    if message.chat.type == 'private' and additions.checkUserInGroup(bot, message.from_user.id, ALLOWED_GROUP_ID):
        messageText = f"*–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, —Å–æ–ª–¥–∞—Ç! –ë–∞—á—É —Ç–∏ –Ω–µ –∑–æ–≤—Å—ñ–º —Ä–æ–∑—ñ–±—Ä–∞–≤—Å—è)*\n\n"\
                     f"–Ø —Ç–æ–π —Ö—Ç–æ –≤–∏–¥–∞–≤–∞—Ç–∏–º–µ —Ç–æ–±—ñ –Ω–∞—à–∏–≤–∫–∏ —Ç–∞ –ø—ñ–¥—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏–º—É —Ç–≤—ñ–π —Ä–∞–Ω–≥. –ú–æ–∂–Ω–∞ —Å–∫–∞–∑–∞—Ç–∏ –∑–∞–π–º–∞—é—Å—å –±—É–≥–æ–ª—Ç–µ—Ä—ñ—î—é.\n"\
                     f"\nüõ†\n\n"\
                     f"‚Ä¢ *–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä–∞–Ω–≥ /rank_look*\n"\
                     f"‚Ä¢ *–Ø–∫—ñ —î –∑–≤–∞–Ω–Ω—è? /ranks*\n"\
                     f"‚Ä¢ *–Ø–∫ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —Å–æ–±—ñ –∑–≤–∞–Ω–Ω—è? /level_up*\n"\
                     f"‚Ä¢ *–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —è–∫—ñ —É —Ç–µ–±–µ —î –∞—á—ñ–≤–∫–∏ /achiev_show*\n"\
                     f"‚Ä¢ *–©–æ —Ç–∞–∫–µ –∞—á—ñ–≤–∫–∏?? OwO /what_it_is*\n"\
                     f"‚Ä¢ *–í—Å—ñ –∞—á—ñ–≤–∫–∏ —Ç–∞ —è–∫ —ó—Ö –æ—Ç—Ä–∏–º–∞—Ç–∏? /look_achiev*\n"\
                     f"‚Ä¢ *–©–æ–± –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é /lobby*\n"\
                     f"\nüõ†\n\n"\

        if additions.isAdmin(bot, message.from_user.username, ALLOWED_GROUP_ID):
            messageText += f"–î–ª—è –∞–¥–º—ñ–Ω—ñ–≤\n"\
                           f"‚Ä¢ *–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∞—á—ñ–≤–∫—É:\n/create_achiev –¢–µ–∫—Å—Ç –∞—á—ñ–≤–∫–∏*\n"\
                           f"‚Ä¢ *–©–æ–± –¥–æ–¥–∞—Ç–∏ –∞—á—ñ–≤–∫—É –∫–æ—Ä–∏—Å—Ç–æ–≤–∞—á—É:\n/add_achiev @username*\n"\
                           f"‚Ä¢ *–©–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –∞—á—ñ–≤–∫—É:\n/delete_achiev*\n"\
                           f"\nüõ†\n\n"

        messageText += f"_–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏, –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –Ω–∞—à–æ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –º–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∏—Ä—ñ—à–∏–º–æ —Ü—é –ø—Ä–æ–±–ª–µ–º—É!_"
        bot.send_message(message.chat.id,
                         messageText,
                         parse_mode='Markdown')


@bot.message_handler(commands=['create_achiev'])
def handle_create_achievement(message):
    if message.chat.type == 'private' and additions.checkUserInGroup(bot, message.from_user.id, ALLOWED_GROUP_ID):
        parts = message.text.split(maxsplit=1)
        if len(parts) != 2:
            bot.reply_to(message, "*–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∞—á–≤—ñ–∫—É:\n/create_achiev –¢–µ–∫—Å—Ç –∞—á—ñ–≤–∫–∏*", parse_mode='Markdown')
            return

        command, achievement_name = parts
        username = message.from_user.username
        if not additions.isAdmin(bot, username, ALLOWED_GROUP_ID):
            bot.send_message(chat_id=message.chat.id,
                             text=f"*–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó!*",
                             parse_mode='Markdown',
                             reply_markup=None)
            return

        achievement_exists = db.checkAchievementExists(achievement_name)
        if achievement_exists:
            bot.send_message(
                chat_id=message.chat.id,
                text=f"–¢–∞–∫–∞ –∞—á—ñ–≤–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î",
                parse_mode='Markdown',
                reply_markup=None
            )
            return

        bot.send_message(
            chat_id=message.chat.id,
            text=f"–ê—á—ñ–≤–∫–∏ –Ω–µ —ñ—Å–Ω—É—î. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∞—á—ñ–≤–∫–∏ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å `—Å–∫–∞—Å—É–≤–∞—Ç–∏`",
            parse_mode='Markdown',
            reply_markup=None
        )
        bot.register_next_step_handler(message, processAchievementImage, achievement_name=achievement_name)


def processAchievementImage(message, achievement_name):
    if message.text:
        if message.text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
            bot.send_message(message.chat.id, f"‚úñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—á—ñ–≤–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            return

    if message.photo:
        photo_file_id = message.photo[-1].file_id
        file_info = bot.get_file(photo_file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        file_extension = file_info.file_path.split('.')[-1]
        if file_extension.lower() not in ['jpg', 'jpeg', 'png']:
            bot.reply_to(message, "–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ JPEG –∞–±–æ PNG.")
            return

        file_path = additions.saveImage(downloaded_file, file_extension)
        if file_path:
            db.createAchievement(achievement_name, file_path["filename"])
            bot.send_message(message.chat.id, f"–ê—á—ñ–≤–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞", parse_mode='html')
            return

        bot.reply_to(message, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        return

    bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –¥—ñ–π—Å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")


@bot.message_handler(commands=['add_achiev'])
def handle_add_achievement(message):
    if message.chat.type == 'private' and additions.checkUserInGroup(bot, message.from_user.id, ALLOWED_GROUP_ID):
        match = re.match(r'/add_achiev\s+@(\w+)', message.text)
        if match is None:
            bot.reply_to(message,
                         "*–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n/add_achiev @username*",
                         parse_mode='Markdown')
            return

        if not additions.isAdmin(bot, message.from_user.username, ALLOWED_GROUP_ID):
            bot.send_message(chat_id=message.chat.id,
                             text=f"*–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó!*",
                             parse_mode='Markdown')
            return

        achievements = db.getAllAchievements()
        if len(achievements) <= 0:
            bot.send_message(chat_id=message.chat.id,
                             text=f"*–ù–∞—Ä–∞–∑—ñ —â–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –∞—á—ñ–≤–∫–∏!*\n\n"
                                  f"_–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∞—á–≤—ñ–∫—É:_\n"
                                  f"*/create_achiev –¢–µ–∫—Å—Ç –∞—á—ñ–≤–∫–∏*",
                             parse_mode='Markdown')
            return

        tmpUrl = additions.saveTempData({"username": match.group(1)})
        markup = types.InlineKeyboardMarkup()
        achievementsTemp = {}
        for index, achievement in enumerate(achievements):
            button_text = achievement[0]
            textLen = 13
            if len(button_text) > textLen:
                button_text = f"{button_text[:textLen]}..."
            callback_data = f"select_achiev:{tmpUrl}:{index}"
            achievementsTemp.update({
                str(index): {
                    "id": achievement[1],
                    "name": achievement[0],
                    "image_name": achievement[2]
                }
            })
            markup.add(types.InlineKeyboardButton(text=button_text, callback_data=callback_data))

        additions.editTempData(tmpUrl, {"achievements": achievementsTemp})
        bot.send_message(chat_id=message.chat.id,
                         text="–û–±–µ—Ä—ñ—Ç—å –∞—á—ñ–≤–∫—É:",
                         reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('select_achiev'))
def handle_achiev_selection(call):
    _, tmpUrl, achievementIndex = call.data.split(":")

    tmpData = additions.loadTempData(tmpUrl)
    additions.deleteTempData(tmpUrl)
    if not tmpData:
        print("tmpData is null")
        return

    username = tmpData["username"]
    achievement = tmpData["achievements"][achievementIndex]
    try:
        db.addAchievement(username, achievement["id"])
    except AchievementAlreadyExists as e:
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.id,
                              text=f"–¢–∞–∫–∞ –∞—á—ñ–≤–∫–∞ –≤–∂–µ –¥–æ–¥–∞–Ω–∞ @{username}")
        return

    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=f"–ê—á—ñ–≤–∫–∞ –¥–æ–¥–∞–Ω–∞ *@{username}*",
                          parse_mode='Markdown')

    dir_path = '../resources/achievements_images'
    file_path = os.path.join(dir_path, achievement["image_name"])
    with open(file_path, 'rb') as openedPhoto:
        bot.send_photo(chat_id=ALLOWED_GROUP_ID, photo=openedPhoto,
                       caption=f"<b>@{username}</b>\n\n{achievement['name']}",
                       parse_mode='html')
    return


@bot.message_handler(commands=['delete_achiev'])
def handle_add_achievement(message):
    if message.chat.type == 'private' and additions.checkUserInGroup(bot, message.from_user.id, ALLOWED_GROUP_ID):
        if not additions.isAdmin(bot, message.from_user.username, ALLOWED_GROUP_ID):
            bot.send_message(chat_id=message.chat.id,
                             text=f"*–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó!*",
                             parse_mode='Markdown')
            return

        achievements = db.getAllAchievements()
        if len(achievements) <= 0:
            bot.send_message(chat_id=message.chat.id,
                             text=f"*–ù–∞—Ä–∞–∑—ñ —â–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –∞—á—ñ–≤–∫–∏!*\n\n"
                                  f"_–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∞—á–≤—ñ–∫—É:_\n"
                                  f"*/create_achiev –¢–µ–∫—Å—Ç –∞—á—ñ–≤–∫–∏*",
                             parse_mode='Markdown')
            return

        tmpUrl = additions.saveTempData({})
        markup = types.InlineKeyboardMarkup()
        achievementsTemp = {}
        for index, achievement in enumerate(achievements):
            button_text = achievement[0]
            textLen = 13
            if len(button_text) > textLen:
                button_text = f"{button_text[:textLen]}..."
            callback_data = f"delete_achiev:{tmpUrl}:{index}"
            achievementsTemp.update({
                str(index): {
                    "id": achievement[1],
                    "name": achievement[0],
                    "image_name": achievement[2]
                }
            })
            markup.add(types.InlineKeyboardButton(text=button_text, callback_data=callback_data))

        additions.editTempData(tmpUrl, {"achievements": achievementsTemp})
        bot.send_message(chat_id=message.chat.id,
                         text="–û–±–µ—Ä—ñ—Ç—å –∞—á—ñ–≤–∫—É:",
                         reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_achiev'))
def handle_achiev_selection(call):
    _, tmpUrl, achievementIndex = call.data.split(":")

    tmpData = additions.loadTempData(tmpUrl)
    additions.deleteTempData(tmpUrl)
    if not tmpData:
        print("tmpData is null")
        return

    achievement = tmpData["achievements"][achievementIndex]
    try:
        db.deleteAchievement(achievement["id"])
    except Exception as e:
        print(e)
        return

    additions.deleteImage(achievement["image_name"])
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=f"*–ê—á—ñ–≤–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ*",
                          parse_mode='Markdown')
    return


@bot.message_handler(commands=['rank_look'])
def handle_get_rank(message):
    if message.chat.type == 'private' and additions.checkUserInGroup(bot, message.from_user.id, ALLOWED_GROUP_ID):
        rank = db.getMyRank(message.from_user.username.replace("@", ""))
        bot.send_message(message.chat.id,
                         f"ü¶æ\n\n"
                         f"–¢–≤—ñ–π —Ä–∞–Ω–≥:\n*{additions.getRankByNumber(rank)}*\n"
                         f"\nü¶æ\n\n"
                         f"_–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —ñ –¥–∞–ª—ñ –∑—Ä–æ—Å—Ç–∞—Ç–∏ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–∑–∏ –∑–∞ –ø–æ–¥–∞–ª—å—à–µ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è!_\n"
                         f"*–ó –ª—é–±–æ–≤'—é –°–∞—à–∫–æ*",
                         parse_mode='Markdown')


@bot.message_handler(commands=['ranks'])
def handle_ranks(message):
    if message.chat.type == 'private' and additions.checkUserInGroup(bot, message.from_user.id, ALLOWED_GROUP_ID):
        ranks = additions.getAllRanks()
        messageText = "üî•\n\n"
        messageText += "\n\n‚¨áÔ∏è\n\n".join(map(lambda rank: f"*{rank}*", ranks.values()))
        messageText += "\n\nüî•\n\n" \
                       "*–ü–æ–ª–∫–æ–≤–Ω–∏–∫* _- –Ω–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥ —è–∫–∏–π –¥–∞—î—Ç—å—Å—è –≤ –Ω–∞—à—ñ–π –≥—Ä—É–ø—ñ,–ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—è —â–æ–± –π–æ–≥–æ –æ—Ç—Ä–∏–º–∞—Ç–∏!_ ü§≠\n\nüî•"
        bot.send_message(message.chat.id, messageText, parse_mode='Markdown')


@bot.message_handler(commands=['achiev_show'])
def handle_get_achievements(message):
    if message.chat.type == 'private' and additions.checkUserInGroup(bot, message.from_user.id, ALLOWED_GROUP_ID):
        achievements = db.getMyAchievements(message.from_user.username.replace("@", ""))
        if not achievements:
            bot.send_message(message.chat.id,
                             f"*–î—Ä—É–∂–µ, –Ω–∞—Ä–∞–∑—ñ —É –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –∞—á—ñ–≤–∫–∏!*\n"
                             f"*–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ ‚û°Ô∏è  /look_achiev*",
                             parse_mode='Markdown')
            return

        achievementsList = ""
        media_group = []
        for achievement in achievements:
            name, image_name = achievement
            achievementsList += f"\n\n‚Ä¢ *{name}*"
            photo = open(os.path.join('..\\resources\\achievements_images', image_name), 'rb')
            media_group.append(types.InputMediaPhoto(photo))

            if len(media_group) == 10 or achievement == achievements[-1]:
                bot.send_media_group(message.chat.id, media_group)
                for photo in media_group:
                    photo.media.close()
                media_group = []

        bot.send_message(message.chat.id, f"*–í–∞—à—ñ –∞—á—ñ–≤–∫–∏:*{achievementsList}", parse_mode='Markdown')


@bot.message_handler(commands=['what_it_is'])
def handle_what_it_is(message):
    if message.chat.type == 'private' and additions.checkUserInGroup(bot, message.from_user.id, ALLOWED_GROUP_ID):
        bot.send_message(message.chat.id,
                         f"üëÅ\n\n"
                         f"*–©–æ —Ç–∞–∫–µ –∞—á—ñ–≤–∫–∏? –¶–µ –º–∞–ª–µ–Ω—å–∫—ñ –∞—á—ñ–≤–∫–∏ —Ç–∞ –∑–∞ –¥–µ—è–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è–∫–∏—Ö –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥—É —Ç–∞ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —Ä–∞–Ω–≥‚¨ÜÔ∏è*\n"
                         f"\nüëÅ\n\n"
                         f"_–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–æ –±—ñ–ª—å—à–µ –ø–∏—Ç–∞–Ω—å, —è–∫–∏—Ö –Ω–µ–º–∞—î –≤ –º–µ–Ω—é –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ–≤:_ *@RodzillaArr*, *@Ikkateiro*",
                         parse_mode='Markdown')


@bot.message_handler(commands=['level_up'])
def handle_level_up(message):
    if message.chat.type == 'private' and additions.checkUserInGroup(bot, message.from_user.id, ALLOWED_GROUP_ID):
        bot.send_message(message.chat.id,
                         f"ü§î\n\n"
                         f"*–ó–≤–∞–Ω–Ω—è –º–æ–∂–Ω–∞ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∞—á—ñ–≤–æ–∫ —è–∫—ñ –≤–∏–¥–∞—é—Ç—å—Å—è –∑–∞ –¥—ñ—ó ü§ü*"
                         f"*–ó–∞ —è–∫—ñ –¥—ñ—ó? –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ ‚û°Ô∏è  /look_achiev*\n"
                         f"\nü§î",
                         parse_mode='Markdown')


@bot.message_handler(commands=['look_achiev'])
def handle_look_achiev(message):
    if message.chat.type == 'private' and additions.checkUserInGroup(bot, message.from_user.id, ALLOWED_GROUP_ID):
        achievements = db.getAllAchievements()
        messageText = "üêæ\n\n_–í—Å—ñ –∞—á—ñ–≤–∫–∏ —ñ —è–∫ —ó—Ö –æ—Ç—Ä–∏–º–∞—Ç–∏!_\n\nüêæ\n\n"
        for achievement in achievements:
            messageText += f"*{achievement[0]}*\n\nüêæ\n\n"
        bot.send_message(message.chat.id, messageText, parse_mode='Markdown')


if __name__ == '__main__':
    db.createDatabase()
    bot.infinity_polling()
    app_logger.logger.info("Bot stopped")
